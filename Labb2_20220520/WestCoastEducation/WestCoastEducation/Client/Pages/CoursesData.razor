@page "/coursesdata"
@using WestCoastEducation.Shared
<PageTitle>WestCoast Education - Kurser</PageTitle>
@inject HttpClient HttpClient
<h1>Kurser på WCE</h1>

<p>Lägg till kurs</p>

<p>
    <label for="Kursnummer">Kursnummer:</label>
    <input label="Kursnummer" @bind="Course.CourseNumber"/>
</p>

<p>
    <label for="Kursnamn">Kursnamn:</label>
    <input type="text" label="Kursnamn" @bind="Course.CourseName"/>
</p>
<p>
    <label for="Kursbeskrivning">Kursbeskrivning:</label>
    <textarea label="Kursbeskrivning" @bind="Course.CourseDescription"/>
</p>
<p>
    <label for="Kurslangd">Kurslängd (timmar):</label>
    <input label="Kurslangd" @bind="Course.CourseLength"/>
</p>
<p>
    <label for="Kursniva">Kursnivå:</label>
    <input label="Kursniva" @bind="Course.CourseLevel"/>
</p>
<p>
    <label for="Kursstatus">Kursstatus:</label>
    <input type="checkbox" label="Kursstatus" @bind="Course.CourseStatus"/>
</p>
<button class="btn btn-primary" @onclick="AddCourseAsync">Lägg till kurs</button>
<button class="btn btn-primary" @onclick="() => GetCourseAsync(Course.CourseNumber)">Hämta kurs med kursnummer</button>
<button class="btn btn-primary" @onclick="PatchCourseAsync">Uppdatera kurs</button>

<p>Tillgängliga kurser:</p>

@if (_courses == null)
{
    <p><em>Hämtar kurser...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Kursnummer</th>
            <th>Kursnamn</th>
            <th>Kursbeskrivning</th>
            <th>Kurslängd</th>
            <th>Kursnivå</th>
            <th>Kursstatus</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var course in _courses)
        {
            <tr>
                <td>@course.Id</td>
                <td>@course.CourseNumber</td>
                <td>@course.CourseName</td>
                <td>@course.CourseDescription</td>
                <td>@course.CourseLength</td>
                <td>@course.CourseLevel</td>
                <td>@(course.CourseStatus ? "Aktiv":"Inaktiv")</td>
               <td><button class="btn-xs btn-danger" @onclick="() => DeleteCourseAsync(course.Id)"><span class="oi oi-trash"></span></button></td>
            </tr>
            
        }
        </tbody>
    </table>
}
@if (_course != null)
{
    Course.Id = _course.Id;
    Course.CourseNumber = _course.CourseNumber;
    Course.CourseName = _course.CourseName;
    Course.CourseDescription = _course.CourseDescription;
    Course.CourseLength = _course.CourseLength;
    Course.CourseLevel = _course.CourseLevel;
    Course.CourseStatus = _course.CourseStatus;
    _course = null;
    InvokeAsync(() =>
    { StateHasChanged();
    });
}
@code {
    public Course Course { get; set; } = new();

    private ICollection<Course>? _courses;
    private Course? _course;

    protected override async Task OnInitializedAsync()
    {
        await GetAllCoursesAsync();
    }

    private async Task AddCourseAsync()
    {
        //var newCourse = Course.CopyCourse(Course);

        var result = await HttpClient.PostAsJsonAsync("api/Course", Course);

        await GetAllCoursesAsync();
    }

        private async Task PatchCourseAsync()
    {
        //var patchCourse = Course.CopyCourse(Course);
        int id = Course.Id;

        var result = await HttpClient.PutAsJsonAsync($"api/Course/{id}", Course);

        await GetAllCoursesAsync();
    }

    private async Task GetAllCoursesAsync()
    {
        var result = await HttpClient.GetFromJsonAsync<ICollection<Course>>("api/Course");
        _courses = result;
    }

    private async Task GetCourseAsync(int courseNumber)
    {
        var result = await HttpClient.GetFromJsonAsync<Course>($"api/Course/{courseNumber}");
        _course = result;
    }

    private async Task DeleteCourseAsync(int courseId)
    {
        var result = await HttpClient.DeleteAsync($"api/Course/{courseId}");
        await GetAllCoursesAsync();
    }
}
