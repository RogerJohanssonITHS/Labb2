@page "/studentdata"
@using WestCoastEducation.Shared
<PageTitle>WestCoast Education - Studenter</PageTitle>
@inject HttpClient HttpClient
<h1>Studenter på WCE</h1>

<p>Hantera studenter</p>

<p>
    <label for="Fornamn">Förnamn:</label>
    <input label="Fornamn" @bind="Student.FirstName"/>
</p>

<p>
    <label for="Efternamn">Efternamn:</label>
    <input label="Efternamn" @bind="Student.LastName"/>
</p>
<p>
    <label for="Email">Email:</label>
    <input label="Email" @bind="Student.Email"/>
</p>
<p>
    <label for="Telefonnr">Telefonnummer:</label>
    <input label="Telefonnr" @bind="Student.PhoneNr"/>
</p>
<p>
    <label for="Gatunamn">Gatunamn:</label>
    <input label="Gatunamn" @bind="Student.Street"/>
</p>
<p>
    <label for="Postnummer">Postnummer:</label>
    <input label="Postnummer" @bind="Student.PostalCode"/>
</p>
<p>
    <label for="Stad">Stad:</label>
    <input label="Stad" @bind="Student.City"/>
</p>
<button class="btn btn-primary" @onclick="AddStudentAsync">Lägg till student</button>
<button class="btn btn-primary" @onclick="()=>GetStudentEmailAsync(Student.Email)">Hämta student via email</button>
<button class="btn btn-primary" @onclick="PutStudentAsync">Uppdatera student</button>

<p>
@*    <label for="StudentId">StudentId:</label>
    <input label="StudentId" @bind="Student.Id"/>*@
    <label for="KursId">Kursnummer:</label>
    <input label="KursId" @bind="Course.CourseNumber"/>
</p>
<button class="btn btn-primary" @onclick="()=>AddStudentToCourseAsync(Course.CourseNumber)">Anmäl student till kurs</button>


<p>Studenter på skolan:</p>

@if (_students == null)
{
    <p><em>Hämtar studenter...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Förnamn</th>
            <th>Efternamn</th>
            <th>Email</th>
            <th>Telenr</th>
            <th>Gatunamn</th>
            <th>Postnummer</th>
            <th>Stad</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var student in _students)
        {
            <tr>
                <td>@student.Id</td>
                <td>@student.FirstName</td>
                <td>@student.LastName</td>
                <td>@student.Email</td>
                <td>@student.PhoneNr</td>
                <td>@student.Street</td>
                <td>@student.PostalCode</td>
                <td>@student.City</td>
            </tr>
        }
        </tbody>
    </table>
    <table class="table">
        <thead>
        <tr>
            <th>Kursnummer</th>
            <th>Kursnamn</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var course in _courses)
        {
            <tr>
                <td>@course.CourseNumber</td>
                <td>@course.CourseName</td>
            </tr>
        }
        </tbody>
    </table>
}
@if (_student != null)
{
    Student.Id = _student.Id;
    Student.FirstName = _student.FirstName;
    Student.LastName = _student.LastName;
    Student.Email = _student.Email;
    Student.PhoneNr = _student.PhoneNr;
    Student.Street = _student.Street;
    Student.PostalCode = _student.PostalCode;
    Student.City = _student.City;
    _student = null;
    InvokeAsync(() =>
    { StateHasChanged();
    });
}



@code {
    public Student Student { get; set; } = new();

    private ICollection<Student>? _students;
    private Student? _student;

    public Course Course { get; set; } = new();

    private ICollection<Course>? _courses;
    private Course? _course;

    protected override async Task OnInitializedAsync()
    {
        await GetAllStudentsAsync();
        await GetAllCoursesAsync();
    }

    private async Task AddStudentAsync()
    {
        var newStudent = Student.CopyStudent(Student);

        var result = await HttpClient.PostAsJsonAsync("api/Student", newStudent);

        await GetAllStudentsAsync();
    }

    private async Task PutStudentAsync()
    {
        var patchStudent = Student.CopyStudent(Student);
        int id = patchStudent.Id;

        var result = await HttpClient.PutAsJsonAsync($"api/Student/{id}", patchStudent);

        await GetAllStudentsAsync();
    }

    private async Task GetAllStudentsAsync()
    {
        var result = await HttpClient.GetFromJsonAsync<ICollection<Student>>("api/Student");
        _students = result;
    }

    private async Task GetStudentEmailAsync(string email)
    {
        var result = await HttpClient.GetFromJsonAsync<Student>($"api/Student/{email}");
        _student = result;
    }



    private async Task DeleteStudentAsync(int studentId)
    {
        var result = await HttpClient.DeleteAsync($"api/Student/{studentId}");
        await GetAllStudentsAsync();
    }


    private async Task GetAllCoursesAsync()
    {
        var result = await HttpClient.GetFromJsonAsync<ICollection<Course>>("api/Course");
        _courses = result;
    }

    //for many-to-many
    private async Task AddStudentToCourseAsync(int courseNumber)
    {
        var student = Student.CopyStudent(Student);
        int id = student.Id;

        Course courseToAdd = Course.CopyCourse(Course);

        var result = await HttpClient.PostAsJsonAsync($"api/Student/{id}/courses", courseToAdd);

        await GetAllStudentsAsync();
    }
}
